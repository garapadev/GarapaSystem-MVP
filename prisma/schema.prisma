// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================
// AUTHENTICATION & USER MANAGEMENT
// =====================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  accounts Account[]
  sessions Session[]
  employee Employee?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// =====================
// ORGANIZATIONAL STRUCTURE
// =====================

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  level       Int      @default(0)
  path        String   @default("")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Self-referencing relationship for hierarchy
  parent   Group?  @relation("GroupHierarchy", fields: [parentId], references: [id])
  children Group[] @relation("GroupHierarchy")

  // Relationships
  employees Employee[]

  @@map("groups")
}

// =====================
// PERMISSION SYSTEM (RBAC)
// =====================

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  resource    String   // e.g., "employees", "tasks", "contacts"
  action      String   // e.g., "create", "read", "update", "delete"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  permissionGroups PermissionGroupPermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model PermissionGroup {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  permissions PermissionGroupPermission[]
  employees   Employee[]

  @@map("permission_groups")
}

model PermissionGroupPermission {
  id                String          @id @default(cuid())
  permissionGroupId String
  permissionId      String
  createdAt         DateTime        @default(now())

  permissionGroup PermissionGroup @relation(fields: [permissionGroupId], references: [id], onDelete: Cascade)
  permission      Permission      @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([permissionGroupId, permissionId])
  @@map("permission_group_permissions")
}

// =====================
// EMPLOYEE MANAGEMENT
// =====================

model Employee {
  id                  String            @id @default(cuid())
  userId              String?           @unique
  employeeNumber      String            @unique
  firstName           String
  lastName            String
  email               String            @unique
  phone               String?
  position            String?
  department          String?
  salary              Decimal?          @db.Decimal(10, 2)
  hireDate            DateTime?
  birthDate           DateTime?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  country             String?
  emergencyContact    String?
  emergencyPhone      String?
  notes               String?
  isActive            Boolean           @default(true)
  groupId             String?
  permissionGroupId   String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relationships
  user            User?            @relation(fields: [userId], references: [id])
  group           Group?           @relation(fields: [groupId], references: [id])
  permissionGroup PermissionGroup? @relation(fields: [permissionGroupId], references: [id])
  assignedTasks   Task[]           @relation("TaskAssignee")
  createdTasks    Task[]           @relation("TaskCreator")
  taskComments    TaskComment[]
  assignedLeads   Lead[]
  activities      Activity[]
  emailAccounts   EmailAccount[]

  @@map("employees")
}

// =====================
// TASK MANAGEMENT
// =====================

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  startDate   DateTime?
  completedAt DateTime?
  estimatedHours Int?
  actualHours    Int?
  tags        String[]     @default([])
  assigneeId  String?
  createdById String?
  position    Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relationships
  assignee  Employee? @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdBy Employee? @relation("TaskCreator", fields: [createdById], references: [id])
  comments  TaskComment[]
  activities Activity[]

  @@map("tasks")
}

model TaskComment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task   Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author Employee @relation(fields: [authorId], references: [id])

  @@map("task_comments")
}

// =====================
// EMAIL/WEBMAIL SYSTEM
// =====================

enum EmailAccountType {
  IMAP
  POP3
  EXCHANGE
}

model EmailAccount {
  id          String           @id @default(cuid())
  name        String
  email       String
  type        EmailAccountType @default(IMAP)
  imapHost    String
  imapPort    Int              @default(993)
  imapSecure  Boolean          @default(true)
  smtpHost    String
  smtpPort    Int              @default(587)
  smtpSecure  Boolean          @default(true)
  username    String
  password    String // Should be encrypted
  isDefault   Boolean          @default(false)
  isActive    Boolean          @default(true)
  employeeId  String
  lastSyncAt  DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relationships
  employee Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  emails   Email[]
  folders  MailFolder[]

  @@unique([employeeId, email])
  @@map("email_accounts")
}

model MailFolder {
  id             String       @id @default(cuid())
  name           String
  path           String
  emailAccountId String
  unreadCount    Int          @default(0)
  totalCount     Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  emailAccount EmailAccount @relation(fields: [emailAccountId], references: [id], onDelete: Cascade)
  emails       Email[]

  @@unique([emailAccountId, path])
  @@map("mail_folders")
}

model Email {
  id             String       @id @default(cuid())
  messageId      String       @unique
  subject        String
  fromAddress    String
  fromName       String?
  toAddresses    String[]
  ccAddresses    String[]     @default([])
  bccAddresses   String[]     @default([])
  replyTo        String?
  bodyText       String?
  bodyHtml       String?
  isRead         Boolean      @default(false)
  isStarred      Boolean      @default(false)
  hasAttachments Boolean      @default(false)
  receivedAt     DateTime
  emailAccountId String
  folderId       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  emailAccount EmailAccount     @relation(fields: [emailAccountId], references: [id], onDelete: Cascade)
  folder       MailFolder?      @relation(fields: [folderId], references: [id])
  attachments  EmailAttachment[]
  activities   Activity[]

  @@map("emails")
}

model EmailAttachment {
  id          String @id @default(cuid())
  filename    String
  contentType String
  size        Int
  url         String
  emailId     String

  email Email @relation(fields: [emailId], references: [id], onDelete: Cascade)

  @@map("email_attachments")
}

// =====================
// CRM CORE ENTITIES
// =====================

enum ContactStatus {
  ACTIVE
  INACTIVE
  PROSPECT
  CUSTOMER
  LEAD
}

model Contact {
  id           String        @id @default(cuid())
  firstName    String
  lastName     String
  email        String?       @unique
  phone        String?
  company      String?
  position     String?
  website      String?
  address      String?
  city         String?
  state        String?
  zipCode      String?
  country      String?
  notes        String?
  tags         String[]      @default([])
  status       ContactStatus @default(ACTIVE)
  source       String?       // How we got this contact
  latitude     Float?
  longitude    Float?
  customFields Json?         @db.JsonB
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relationships
  leads      Lead[]
  activities Activity[]

  @@map("contacts")
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

model Lead {
  id                String     @id @default(cuid())
  title             String
  description       String?
  value             Decimal?   @db.Decimal(10, 2)
  currency          String?    @default("BRL")
  status            LeadStatus @default(NEW)
  source            String?
  probability       Int?       @default(0)
  expectedCloseDate DateTime?
  actualCloseDate   DateTime?
  contactId         String?
  assignedToId      String?
  position          Int        @default(0)
  customFields      Json?      @db.JsonB
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relationships
  contact    Contact?   @relation(fields: [contactId], references: [id])
  assignedTo Employee? @relation(fields: [assignedToId], references: [id])
  activities Activity[]

  @@map("leads")
}

// =====================
// ACTIVITY TRACKING
// =====================

enum ActivityType {
  EMAIL
  CALL
  MEETING
  TASK
  NOTE
  SYSTEM
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  title       String
  description String?
  metadata    Json?        @db.JsonB
  employeeId  String?
  contactId   String?
  leadId      String?
  taskId      String?
  emailId     String?
  createdAt   DateTime     @default(now())

  // Relationships
  employee Employee? @relation(fields: [employeeId], references: [id])
  contact  Contact?  @relation(fields: [contactId], references: [id])
  lead     Lead?     @relation(fields: [leadId], references: [id])
  task     Task?     @relation(fields: [taskId], references: [id])
  email    Email?    @relation(fields: [emailId], references: [id])

  @@map("activities")
}

// =====================
// WEBHOOK SYSTEM
// =====================

enum WebhookEvent {
  CONTACT_CREATED
  CONTACT_UPDATED
  CONTACT_DELETED
  LEAD_CREATED
  LEAD_UPDATED
  LEAD_DELETED
  TASK_CREATED
  TASK_UPDATED
  TASK_DELETED
  EMAIL_RECEIVED
  EMPLOYEE_CREATED
  EMPLOYEE_UPDATED
}

model Webhook {
  id          String       @id @default(cuid())
  name        String
  url         String
  events      WebhookEvent[]
  secret      String?
  isActive    Boolean      @default(true)
  lastTriggered DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  deliveries WebhookDelivery[]

  @@map("webhooks")
}

model WebhookDelivery {
  id          String   @id @default(cuid())
  webhookId   String
  event       WebhookEvent
  payload     Json     @db.JsonB
  response    String?
  statusCode  Int?
  success     Boolean  @default(false)
  attempts    Int      @default(1)
  createdAt   DateTime @default(now())
  deliveredAt DateTime?

  webhook Webhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@map("webhook_deliveries")
}

// =====================
// SYSTEM CONFIGURATION
// =====================

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  category  String?
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}